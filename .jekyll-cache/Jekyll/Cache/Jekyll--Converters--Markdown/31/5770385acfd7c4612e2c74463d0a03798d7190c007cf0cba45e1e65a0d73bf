I"µ‰<h1 id="raii--templates-smart-pointer">RAII + Templates. Smart Pointer</h1>

<p>–í —ç—Ç–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ –º—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è —Å –∏–¥–∏–æ–º–æ–π RAII –∏ —Ä–µ–∞–ª–∏–∑—É–µ–º —Å–≤–æ–∏ —É–º–Ω—ã–µ —É–∫–∞–∑–∞—Ç–µ–ª–∏.</p>

<p><a href="https://replit.com/@IlyaSiganov/smartptr#main.cpp">–®–∞–±–ª–æ–Ω –∑–∞–¥–∞—á–∏ –≤ replit</a></p>

<h2 id="raii--templates">RAII + Templates</h2>

<p>–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ –µ—Å—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–∞–Ω–≥–ª. Resource Acquisition Is Initialization (RAII)) ‚Äî –ø—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è <strong>–∏–¥–∏–æ–º–∞</strong> –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, —Å–º—ã—Å–ª –∫–æ—Ç–æ—Ä–æ–π –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ —Å –ø–æ–º–æ—â—å—é —Ç–µ—Ö –∏–ª–∏ –∏–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω–æ —Å–æ–≤–º–µ—â–∞–µ—Ç—Å—è —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π, –∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ ‚Äî —Å —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–∞.</p>

<h2 id="-—á—Ç–æ-—ç—Ç–æ-–±—ã–ª–æ">üò® –ß—Ç–æ —ç—Ç–æ –±—ã–ª–æ?</h2>

<p>–†–∞–∑–±–µ—Ä—ë–º—Å—è, —á—Ç–æ –∂–µ –∏–º–µ–µ—Ç—Å—è –≤–≤–∏–¥—É.</p>

<p>–ï—Å–ª–∏ –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ —Ñ–∞–π–ª, —Ç–æ –≤–∞–º –Ω–∞–¥–æ –µ–≥–æ –∑–∞–∫—Ä—ã—Ç—å. –¢–∞–∫ –Ω–∞–ø–∏—Å–∞–Ω—ã –±–∏–±–ª–∏–æ—Ç–µ–∫–∏. –¢–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –û–°. –¢–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω –º–∏—Ä. –î–∞–≤–∞–π—Ç–µ –Ω–∞–ø–∏—à–µ–º –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–º–∞—Å–æ–≤:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">my_cool_function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">auto</span> <span class="n">file</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">"funny_meme.jpg"</span><span class="p">);</span> <span class="c1">// —Ç—É—Ç –Ω–∞–º –≤—ã–¥–∞—é—Ç –∫–∞–∫–æ–π-—Ç–æ —Ä–µ—Å—É—Ä—Å</span>
  <span class="c1">// –¥–µ–ª–∞–µ–º –≤—Å—è–∫–∏–µ —à—Ç—É–∫–∏ —Ç—É—Ç</span>
  <span class="c1">// –ø—Ä–æ—Å—Ç–æ –∫–æ–¥–∏–º</span>
  <span class="c1">// –æ–∫–¥–∞</span>
  <span class="n">close</span><span class="p">(</span><span class="n">file</span><span class="p">);</span> <span class="c1">// –∞ —Ç—É—Ç –º—ã —Ä–µ—Å—É—Ä "–≤–æ–∑–≤—Ä–∞—â–∞–µ–º". –ö–∞–∫ –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏.</span>
  <span class="c1">// —Ç–µ–ø–µ—Ä—å –≤—Å—ë –æ–∫, –ø–∞–º—è—Ç—å –Ω–µ —É—Ç–µ–∫–ª–∞, –û–° –Ω–µ –ª–∞–≥–∞–µ—Ç, </span>
  <span class="c1">// —é–∑–µ—Ä —Å—á–∞—Å—Ç–ª–∏–≤ –∏ –º–æ–∂–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å –µ—â–µ –æ–¥–Ω—É –≤–∫–ª–∞–¥–∫—É –±—Ä–∞—É–∑–µ—Ä–∞</span>
<span class="p">}</span>
</code></pre></div></div>

<p>–ü–æ—á–µ–º—É –±—ã –Ω–µ –ø–∏—Å–∞—Ç—å –≤—Å–µ–≥–¥–∞ —Ç–∞–∫? –í —á—ë–º –ø—Ä–æ–±–ª–µ–º–∞?</p>

<ol>
  <li>–í–æ-–ø–µ—Ä–≤—ã—Ö, –º–æ–∂–Ω–æ –∑–∞–±—ã—Ç—å –Ω–∞–ø–∏—Å–∞—Ç—å <code class="language-plaintext highlighter-rouge">close(file)</code>. –ò —è –±—ã —Ç–æ—á–Ω–æ –∑–∞–±—ã–ª. ü§™</li>
  <li>–í–æ-–≤—Ç–æ—Ä—ã—Ö, –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ, –Ω–∞–¥–æ –æ—Å–≤–æ–±–æ–∂–¥–∞—Ç—å –∏–ª–∏ –Ω–µ—Ç. –ö–æ–≥–¥–∞ –æ—Å–≤–æ–±–æ–∂–¥–∞—Ç—å? –í–¥—Ä—É–≥ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –∏ –≤ –¥—Ä—É–≥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏? –ò–ª–∏ –∫–∞–∫-—Ç–æ –≤–º–µ—Å—Ç–µ —Å —á–µ–º-—Ç–æ –µ—â–µ? –ò–ª–∏ –≤–Ω—É—Ç—Ä–∏ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ if-else?  ü§Ø</li>
  <li>
    <p>–í-—Ç—Ä–µ—Ç—å–∏—Ö, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ—á–∫–µ <code class="language-plaintext highlighter-rouge">// –æ–∫–¥–∞</code> –∏ –≤—ã–ø–∞–¥–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ (–≤—ã –∂–µ –ø–æ–º–Ω–∏—Ç–µ —á—Ç–æ —ç—Ç–æ?), —Ç–æ–≥–¥–∞ —Ä–µ—Å—É—Ä—Å –æ–∫–∞–∂–µ—Ç—Å—è –Ω–µ–æ—Å–≤–æ–±–æ–∂–¥—ë–Ω–Ω—ã–º, –∞ —ç—Ç–æ –Ω–µ—ç—Ç–∏—á–Ω–æ üòµ. –ü—Ä–∏–Ω—Ü–∏–ø RAII –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã —è–∑—ã–∫–∞ –ø–æ–∑–≤–æ–ª—è—Ç –Ω–∞–º –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —Ä–µ—Å—É—Ä—Å. –ù–æ –∫–∞–∫?</p>

    <div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">// !!!!!!</span>
 <span class="c1">// –ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞ –¥–ª—è __–≥–∏–∫–æ–≤__.</span>

 <span class="c1">// lazy_string - —ç—Ç–æ –∫–∞–∫–æ–π-—Ç–æ –∫–ª–∞—Å—Å –¥–ª—è –ª–µ–Ω–∏–≤—ã—Ö —Å—Ç—Ä–æ–∫, –æ–∫.</span>
 <span class="c1">// lhs - left hand side</span>
 <span class="c1">// rhs - right hand side</span>
 <span class="n">lazy_string</span> <span class="nf">concat</span><span class="p">(</span><span class="n">lazy_string</span> <span class="n">lhs</span><span class="p">,</span> <span class="n">lazy_string</span> <span class="n">rhs</span><span class="p">)</span> <span class="p">{</span>
     <span class="c1">// —Ç—É—Ç –º—ã –≤—ã–¥–µ–ª—è–µ–º –ø–∞–º—è—Ç—å –≤—Ä—É—á–Ω—É—é</span>
     <span class="c1">// –ó–∞–±–∞–≤–Ω–æ, –Ω–æ —ç—Ç–æ—Ç buffer —É—Ç–µ—á–µ—Ç, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –±—Ä–æ—Å–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ</span>
     <span class="kt">char</span><span class="o">*</span> <span class="n">buffer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">*</span><span class="p">[</span><span class="n">lhs</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">+</span> <span class="n">rhs</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]{};</span>

     <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">lhs</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
         <span class="n">buffer</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">lhs</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
     <span class="p">}</span>
     <span class="c1">// –Ω–µ –ø–æ —Ç–æ–º—É –∏—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è, at –±—Ä–æ—Å–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ</span>
     <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">lhs</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
         <span class="n">buffer</span><span class="p">[</span><span class="n">lhs</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">+</span> <span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">rhs</span><span class="p">.</span><span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">);</span> <span class="c1">// –ë–î–´–©–¨!!!!!!!</span>
     <span class="p">}</span>
     <span class="k">auto</span> <span class="n">result</span> <span class="o">=</span> <span class="n">lazy_string</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>
     <span class="c1">// —Ç–∞–º –≤—ã–ª–µ—Ç–µ–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –∞ —Å—é–¥–∞ –º—ã –±–æ–ª—å—à–µ –ù–ò–ö–û–ì–î–ê –Ω–µ –¥–æ–π–¥–µ–º</span>
     <span class="c1">// –∑–Ω–∞—á–∏—Ç delete –Ω–µ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω. –ó–Ω–∞—á–∏—Ç –ø–∞–º—è—Ç—å —É—Ç–µ–∫–ª–∞</span>
     <span class="k">delete</span><span class="p">[]</span> <span class="n">buffer</span><span class="p">;</span>
     <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
 <span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="-–∫–∞–∫-—Å–¥–µ–ª–∞—Ç—å-raii-–≤-—Å">üßê –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å RAII –≤ –°++?</h2>

<p>–í —Å++ –µ—Å—Ç—å –∫–ª–∞—Å—Å—ã. –£ –∫–ª–∞—Å—Å–æ–≤ –µ—Å—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã –∏ –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã. –°–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –º–æ–∂–Ω–æ –Ω–∞ —Å—Ç–µ–∫–µ, –∞ –º–æ–∂–Ω–æ –≤ –∫—É—á–µ. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å—Ç–µ–∫–µ –Ω–∞–∑—ã–≤–∞—é—Ç—Å—è ‚Äú–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏‚Äù. –ê –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É–¥–∞–ª—è—é—Ç—Å—è, —Ö–º, <em>–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏,</em> –∫–æ–≥–¥–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –æ–±–ª–∞—Å—Ç—å –∏—Ö –¥–µ–π—Å—Ç–≤–∏—è (–∑–∞–∫–æ–Ω—á–∏–ª—Å—è –±–ª–æ–∫ –∫–æ–¥–∞ –≤–Ω—É—Ç—Ä–∏ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫, –≤—ã–ø–∞–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –≤—ã–∫–ª—é—á–∏–ª–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–µ). –ê –∫–æ–≥–¥–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç—Å—è, —Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä (–∏–ª–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä, —á—Ç–æ–±—ã –æ–±—ä–µ–∫—Ç —É–Ω–∏—á—Ç–æ–∂–∏–ª—Å—è? weird üòì).</p>

<p>–ß—É–≤—Å—Ç–≤—É–µ—Ç–µ?</p>

<p><strong>–ó–∞ –Ω–∞—Å –∫—Ç–æ-—Ç–æ</strong> –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑–æ–≤–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é-–¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä, –¥–∞–∂–µ –µ—Å–ª–∏ –≤—ã–ª–µ—Ç–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ!!! –≠—Ç–æ—Ç —ç—Ñ—Ñ–µ–∫—Ç –º—ã –∏ –±—É–¥–µ–º —ç–∫—Å–ø–ª—É–∞—Ç–∏—Ä–æ–≤–∞—Ç—å. üôÄ</p>

<h2 id="–ø–∞–º—è—Ç—å-–∫–∞–∫-—Ä–µ—Å—É—Ä—Å">–ü–∞–º—è—Ç—å –∫–∞–∫ —Ä–µ—Å—É—Ä—Å</h2>

<p>–ü–∞–º—è—Ç—å –≤ –∫—É—á–µ - —ç—Ç–æ —Ç–æ–∂–µ —Ä–µ—Å—É—Ä—Å. –ú—ã –ø–æ–ª—É—á–∞–µ–º —ç—Ç–æ—Ç —Ä–µ—Å—É—Ä—Å –≤—ã–∑—ã–≤–∞—è <code class="language-plaintext highlighter-rouge">new</code> –∏–ª–∏ <code class="language-plaintext highlighter-rouge">malloc</code>. –ò –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å –ø–æ–º–æ—â—å—é <code class="language-plaintext highlighter-rouge">delete</code> –∏–ª–∏ <code class="language-plaintext highlighter-rouge">free</code>. –ò –º—ã –º–æ–∂–µ–º –∑–∞–±—ã—Ç—å –≤—ã–∑–≤–∞—Ç—å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–º, –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–º –∏–ª–∏ —Å–ª–æ–º–∞–Ω—ã–º –∏–∑-–∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.</p>

<p>–î–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º —É–º–Ω—ã–µ —É–∫–∞–∑–∞—Ç–µ–ª–∏</p>

<p>–Ø –º–æ–≥—É –Ω–∞–ø–∏—Å–∞—Ç—å –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π –∫–æ–¥ –¥–ª—è ‚Äú—É–º–Ω–æ–≥–æ —É–∫–∞–∑–∞—Ç–µ–ª—è‚Äù. –ö–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–¥–∏–æ–º—É RAII –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—Å—Ç–∏—Ç –ø–∞–º—è—Ç—å!</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span>
<span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>
<span class="k">class</span> <span class="nc">SmartPointer</span> <span class="p">{</span>
 <span class="nl">private:</span>
  <span class="n">T</span> <span class="o">*</span><span class="n">ptr_</span><span class="p">;</span> <span class="c1">// –≤ —ç—Ç–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–∞–Ω–∏—Ç—Å—è –°–´–†–û–ô —É–∫–∞–∑–∞—Ç–µ–ª—å</span>
  <span class="c1">// –ø–æ —Å—É—Ç–∏ —ç—Ç–æ—Ç –∫–ª–∞—Å—Å –í–õ–ê–î–ï–ï–¢ —Å—ã—Ä—ã–º —É–∫–∞–∑–∞—Ç–µ–ª–µ–º. </span>

 <span class="nl">public:</span>
  <span class="n">SmartPointer</span><span class="p">(</span><span class="n">T</span> <span class="o">*</span><span class="n">ptr</span><span class="p">)</span> <span class="o">:</span> <span class="n">ptr_</span><span class="p">(</span><span class="n">ptr</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"SmartPointer is created and wraps a ptr"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="n">T</span> <span class="o">*</span><span class="n">Get</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">ptr_</span><span class="p">;</span> <span class="p">}</span>

  <span class="o">~</span><span class="n">SmartPointer</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Deleting SmartPointer and original ptr"</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="k">delete</span> <span class="n">ptr_</span><span class="p">;</span> <span class="c1">// –≤–µ—Å—å —Å—ã—Ä–±–æ—Ä —Ä–∞–¥–∏ —ç—Ç–æ–π —Å—Ç—Ä–æ—á–∫–∏. </span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="p">{</span>  <span class="c1">// –ù–∞—á–∞–ª—Å—è –Ω–æ–≤—ã–π –±–ª–æ–∫ –∫–æ–¥–∞. –î–∞, —Ç–∞–∫ –º–æ–∂–Ω–æ.</span>
    <span class="c1">// –°–æ–∑–¥–∞–¥–∏–º –Ω–∞ —Å—Ç–µ–∫–µ —É–º–Ω—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å –∏ –ø–æ–ª–æ–∂–∏–º –≤ –Ω–µ–≥–æ —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ int</span>
    <span class="n">SmartPointer</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">sptr</span><span class="p">(</span><span class="k">new</span> <span class="kt">int</span><span class="p">(</span><span class="mi">42</span><span class="p">));</span>
    <span class="c1">// –ø–æ–ª—É—á–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ int –º–µ—Ç–æ–¥–æ–º get.</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">sptr</span><span class="p">.</span><span class="n">Get</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="o">*</span><span class="n">sptr</span><span class="p">.</span><span class="n">Get</span><span class="p">()</span> <span class="o">=</span> <span class="mi">7</span><span class="p">;</span>  <span class="c1">// –¥–∞–∂–µ –∏–∑–º–µ–Ω—è–µ–º —á–∏—Å–ª–æ –ø–æ –∞–¥—Ä–µ—Å—É!</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">sptr</span><span class="p">.</span><span class="n">Get</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
  <span class="p">}</span>  <span class="c1">// –≤–æ—Ç –≥–¥–µ-—Ç–æ —Ç—É—Ç –≤—ã–∑–æ–≤–µ—Ç—Å—è –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä sptr –ø–æ—Ç–æ–º—É-—á—Ç–æ —ç—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è</span>
     <span class="c1">// –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è, –∞ —Ç–∞–∫ –∫–∞–∫ –≤–Ω—É—Ç—Ä–∏ –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ SmartPointer –º—ã —É–¥–∞–ª–∏–ª–∏</span>
     <span class="c1">// —É–∫–∞–∑–∞—Ç–µ–ª—å, —Ç–æ –º—ã –æ—Å–≤–æ–±–æ–¥–∏–ª–∏ —Ä–µ—Å—É—Ä—Å!!</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="/images/smartptr.jpg" alt="img" /></p>

<p>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —É —ç—Ç–æ–≥–æ —É–º–Ω–æ–≥–æ —É–∫–∞–∑–∞—Ç–µ–ª—è –µ—Å—Ç—å –∫—É—á–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–≤:</p>

<ul>
  <li>—ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç –º–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å, –∞ –∑–Ω–∞—á–∏—Ç –±—É–¥–µ—Ç –¥–≤–∞ —É–º–Ω—ã—Ö —É–∫–∞–∑–∞—Ç–µ–ª—è, —Å–º–æ—Ç—Ä—è—â–∏—Ö –Ω–∞ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —Ä–µ—Å—É—Ä—Å. –ó–Ω–∞—á–∏—Ç, –∫–æ–≥–¥–∞ –¥–≤–∞ —É–º–Ω—ã—Ö —É–∫–∞–∑–∞—Ç–µ–ª—è —É–¥–∞–ª—è—Ç—Å—è –æ–Ω–∏ –ø–æ–ø—ã—Ç–∞—é—Ç—Å—è –¥–≤–∞–∂–¥—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å —Ä–µ—Å—É—Ä—Å, —á—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ —Å–µ–≥—Ñ–æ–ª—Ç—É. (–¥–≤–æ–π–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏, –∞ —ç—Ç–æ –æ—à–∏–±–∫–∞)</li>
  <li>—Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —É–∫–∞–∑–∞—Ç–µ–ª—å, —Ç–æ –æ–Ω –¥–æ–ª–∂–µ–Ω —Å–µ–±—è –≤–µ—Å—Ç–∏ –∫–∞–∫ —É–∫–∞–∑–∞—Ç–µ–ª—å: –Ω–∞–¥–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä <code class="language-plaintext highlighter-rouge">*</code>, <code class="language-plaintext highlighter-rouge">-&gt;</code>, <code class="language-plaintext highlighter-rouge">bool</code></li>
</ul>

<h2 id="–∑–∞–¥–∞–Ω–∏–µ">–ó–∞–¥–∞–Ω–∏–µ</h2>

<p>–°–ª–µ–¥—É—é—â–µ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –æ—à–∏–±–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ, –ø–æ—ç—Ç–æ–º—É –≤—ã –Ω–∞–ø–∏—à–∏—Ç–µ –¥–≤–∞ –≤–∏–¥–∞ —É–º–Ω—ã—Ö —É–∫–∞–∑–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–º–Ω–æ–≥–æ –∫—Ä—É—á–µ –º–æ–µ–≥–æ <code class="language-plaintext highlighter-rouge">SmartPointer</code>.</p>

<h2 id="–∑–∞–¥–∞—á–∞-1-scoped_ptrt">–ó–∞–¥–∞—á–∞ 1. <code class="language-plaintext highlighter-rouge">scoped_ptr&lt;T&gt;</code></h2>

<p>–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–∞–∫–æ–≥–æ —É–∫–∞–∑–∞—Ç–µ–ª—è - –æ—Ç –º–µ—Å—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–∫–∞–∑–∞—Ç–µ–ª—è –¥–æ –∫–æ–Ω—Ü–∞ –æ–±—ä–µ–º–ª—é—â–µ–≥–æ —Å–∫–æ—É–ø–∞.</p>

<h3 id="–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å-–∫–ª–∞—Å—Å–∞-scoped_ptr">–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–ª–∞—Å—Å–∞ <code class="language-plaintext highlighter-rouge">scoped_ptr</code></h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span>
<span class="k">class</span> <span class="nc">scoped_ptr</span> <span class="p">{</span>
<span class="nl">public:</span>
  <span class="k">typedef</span> <span class="n">T</span> <span class="n">element_type</span><span class="p">;</span> <span class="c1">// –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ –∑–¥–µ—Å—å.</span>

  <span class="c1">// —è–≤–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –æ–±–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è —É–∫–∞–∑–∞—Ç–µ–ª—è</span>

  <span class="c1">// —É–¥–∞–ª–∏—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è</span>

  <span class="c1">// —É–¥–∞–ª–∏—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è</span>

  <span class="c1">// –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä</span>

  <span class="c1">// –º–µ—Ç–æ–¥ get —á—Ç–æ–±—ã –≤–∑—è—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—å</span>
  
  <span class="c1">// –æ–ø–µ—Ä–∞—Ç–æ—Ä -&gt; —á—Ç–æ–±—ã –≤–∑—è—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—å. </span>

  <span class="c1">// –æ–ø–µ—Ä–∞—Ç–æ—Ä * —Ä–∞–∑—ã–º–µ–Ω–æ–≤–∞–Ω–∏—è —É–∫–∞–∑–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä–µ–∫—Ç T</span>

  <span class="c1">// –º–µ—Ç–æ–¥ reset –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏–ª–∏ –∑–∞–º–µ–Ω—ã —É–∫–∞–∑–∞—Ç–µ–ª—è</span>

  <span class="c1">// –º–µ—Ç–æ–¥ release —á—Ç–æ–±—ã –æ—Ç–¥–∞—Ç—å —Å—ã—Ä–æ–π —É–∫–∞–∑–∞—Ç–µ–ª—å, –ù–û –ù–ï –£–î–ê–õ–Ø–¢–¨ –µ–≥–æ</span>

  <span class="c1">// —ç—Ç–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–∏—Å–∞—Ç—å if (sptr) { ... }.</span>
  <span class="k">explicit</span> <span class="k">operator</span> <span class="kt">bool</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<h3 id="—Ñ–∏–Ω–∞–ª—å–Ω—ã–π-—Ç–µ—Å—Ç--scoped_ptr">–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç  <code class="language-plaintext highlighter-rouge">scoped_ptr</code></h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;cassert&gt;
</span>
<span class="k">static</span> <span class="kt">void</span> <span class="nf">test_scoped_ptr</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">static_assert</span><span class="p">(</span>
      <span class="o">!</span><span class="n">std</span><span class="o">::</span><span class="n">is_convertible</span><span class="o">&lt;</span><span class="kt">int</span> <span class="o">*</span><span class="p">,</span> <span class="n">scoped_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;::</span><span class="n">value</span><span class="p">,</span>
      <span class="s">"scoped ptr should not have implicit constructor from pointer!"</span><span class="p">);</span>

  <span class="k">static_assert</span><span class="p">(</span><span class="o">!</span><span class="n">std</span><span class="o">::</span><span class="n">is_copy_constructible</span><span class="o">&lt;</span><span class="n">scoped_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;::</span><span class="n">value</span><span class="p">,</span>
                <span class="s">"scoped ptr should not be copiable"</span><span class="p">);</span>

  <span class="k">static_assert</span><span class="p">(</span><span class="o">!</span><span class="n">std</span><span class="o">::</span><span class="n">is_move_constructible</span><span class="o">&lt;</span><span class="n">scoped_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;::</span><span class="n">value</span><span class="p">,</span>
                <span class="s">"scoped ptr should not be movable"</span><span class="p">);</span>

  <span class="k">static_assert</span><span class="p">(</span><span class="o">!</span><span class="n">std</span><span class="o">::</span><span class="n">is_copy_assignable</span><span class="o">&lt;</span><span class="n">scoped_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;::</span><span class="n">value</span><span class="p">,</span>
                <span class="s">"scoped ptr should not be copiable by operator="</span><span class="p">);</span>

  <span class="k">static_assert</span><span class="p">(</span><span class="o">!</span><span class="n">std</span><span class="o">::</span><span class="n">is_move_assignable</span><span class="o">&lt;</span><span class="n">scoped_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;::</span><span class="n">value</span><span class="p">,</span>
                <span class="s">"scoped ptr should not be movable by operator="</span><span class="p">);</span>

  <span class="k">static_assert</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">is_same</span><span class="o">&lt;</span><span class="n">scoped_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;::</span><span class="n">element_type</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;::</span><span class="n">value</span><span class="p">,</span>
                <span class="s">"scoped ptr should contain element_type"</span><span class="p">);</span>

  <span class="k">static_assert</span><span class="p">(</span>
      <span class="n">std</span><span class="o">::</span><span class="n">is_constructible</span><span class="o">&lt;</span><span class="kt">bool</span><span class="p">,</span> <span class="n">scoped_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;::</span><span class="n">value</span> <span class="c1">// explicit conversion</span>
          <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">std</span><span class="o">::</span><span class="n">is_convertible</span><span class="o">&lt;</span><span class="n">scoped_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">,</span>
                                  <span class="kt">bool</span><span class="o">&gt;::</span><span class="n">value</span><span class="p">,</span> <span class="c1">// implicit conversion</span>
      <span class="s">"scoped ptr should convertible to the bool, but not implicitly"</span><span class="p">);</span>

  <span class="p">{</span>
    <span class="n">scoped_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">empty_ptr</span><span class="p">;</span>

    <span class="n">assert</span><span class="p">(</span><span class="o">!</span><span class="n">empty_ptr</span><span class="p">);</span>
    <span class="n">assert</span><span class="p">(</span><span class="n">empty_ptr</span><span class="p">.</span><span class="n">get</span><span class="p">()</span> <span class="o">==</span> <span class="nb">nullptr</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="p">{</span>
    <span class="k">struct</span> <span class="nc">entity</span> <span class="p">{</span>
      <span class="kt">int</span> <span class="n">f1</span><span class="p">;</span>
      <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">f2</span><span class="p">;</span>
    <span class="p">};</span>

    <span class="k">static_assert</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">is_same</span><span class="o">&lt;</span><span class="n">scoped_ptr</span><span class="o">&lt;</span><span class="n">entity</span><span class="o">&gt;::</span><span class="n">element_type</span><span class="p">,</span> <span class="n">entity</span><span class="o">&gt;::</span><span class="n">value</span><span class="p">,</span>
                  <span class="s">"scoped ptr should contain element_type"</span><span class="p">);</span>

    <span class="n">scoped_ptr</span><span class="o">&lt;</span><span class="n">entity</span><span class="o">&gt;</span> <span class="k">const</span> <span class="n">ptr</span><span class="p">{</span><span class="k">new</span> <span class="n">entity</span><span class="p">{</span><span class="mi">10</span><span class="p">,</span> <span class="s">"hello"</span><span class="p">}};</span>

    <span class="n">assert</span><span class="p">(</span><span class="n">ptr</span><span class="o">-&gt;</span><span class="n">f1</span> <span class="o">==</span> <span class="mi">10</span><span class="p">);</span>
    <span class="n">assert</span><span class="p">(</span><span class="n">ptr</span><span class="o">-&gt;</span><span class="n">f2</span> <span class="o">==</span> <span class="s">"hello"</span><span class="p">);</span>

    <span class="n">assert</span><span class="p">((</span><span class="o">*</span><span class="n">ptr</span><span class="p">).</span><span class="n">f1</span> <span class="o">==</span> <span class="mi">10</span><span class="p">);</span>
    <span class="n">assert</span><span class="p">((</span><span class="o">*</span><span class="n">ptr</span><span class="p">).</span><span class="n">f2</span> <span class="o">==</span> <span class="s">"hello"</span><span class="p">);</span>

    <span class="n">assert</span><span class="p">(</span><span class="n">ptr</span><span class="p">.</span><span class="n">get</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">f1</span> <span class="o">==</span> <span class="mi">10</span><span class="p">);</span>
    <span class="n">assert</span><span class="p">(</span><span class="n">ptr</span><span class="p">.</span><span class="n">get</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">f2</span> <span class="o">==</span> <span class="s">"hello"</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="p">{</span>
    <span class="n">scoped_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">ptr</span><span class="p">{</span><span class="k">new</span> <span class="kt">int</span><span class="p">{</span><span class="mi">10</span><span class="p">}};</span>
    <span class="n">assert</span><span class="p">(</span><span class="o">*</span><span class="n">ptr</span> <span class="o">==</span> <span class="mi">10</span><span class="p">);</span>
    <span class="n">assert</span><span class="p">(</span><span class="n">ptr</span><span class="p">);</span>

    <span class="n">ptr</span><span class="p">.</span><span class="n">reset</span><span class="p">();</span>
    <span class="n">assert</span><span class="p">(</span><span class="n">ptr</span><span class="p">.</span><span class="n">get</span><span class="p">()</span> <span class="o">==</span> <span class="nb">nullptr</span><span class="p">);</span>
    <span class="n">assert</span><span class="p">(</span><span class="o">!</span><span class="n">ptr</span><span class="p">);</span>

    <span class="n">ptr</span><span class="p">.</span><span class="n">reset</span><span class="p">(</span><span class="k">new</span> <span class="kt">int</span><span class="p">{</span><span class="mi">20</span><span class="p">});</span>
    <span class="n">assert</span><span class="p">(</span><span class="o">*</span><span class="n">ptr</span> <span class="o">==</span> <span class="mi">20</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="p">{</span>
    <span class="kt">int</span> <span class="o">*</span><span class="n">i</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">{</span><span class="mi">10</span><span class="p">};</span>
    <span class="n">scoped_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">ptr</span><span class="p">{</span><span class="n">i</span><span class="p">};</span>

    <span class="n">assert</span><span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">ptr</span><span class="p">.</span><span class="n">release</span><span class="p">());</span>

    <span class="k">delete</span> <span class="n">i</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="–ø—Ä–∏–º–µ—Ä-–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è-scoped_ptr">–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è <code class="language-plaintext highlighter-rouge">scoped_ptr</code></h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// –¢—É—Ç –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å –ø—Ä–∏–º–µ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</span>
<span class="k">struct</span> <span class="nc">foo</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">field1</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">field2</span><span class="p">;</span>
<span class="p">};</span>

<span class="kt">void</span> <span class="nf">bar</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">scoped_ptr</span><span class="o">&lt;</span><span class="n">foo</span><span class="o">&gt;</span> <span class="n">foo_ptr</span><span class="p">(</span><span class="k">new</span> <span class="n">foo</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">111</span><span class="p">});</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="o">*</span><span class="n">foo_ptr</span><span class="p">).</span><span class="n">field1</span>
        <span class="o">&lt;&lt;</span> <span class="n">foo_ptr</span><span class="o">-&gt;</span><span class="n">field1</span>
        <span class="o">&lt;&lt;</span> <span class="n">foo_ptr</span><span class="p">.</span><span class="n">get</span><span class="p">()</span>
        <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">foo_ptr</span><span class="p">)</span> <span class="n">foo_ptr</span><span class="o">-&gt;</span><span class="n">field1</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>

    <span class="n">foo_ptr</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">foo_ptr</span><span class="p">);</span> <span class="c1">// - compilation fails</span>
    <span class="k">auto</span> <span class="n">foo_ptr2</span><span class="p">(</span><span class="n">foo_ptr</span><span class="p">);</span><span class="c1">// - compilation fails</span>
    <span class="n">foo_ptr</span> <span class="o">=</span> <span class="n">foo_ptr</span><span class="p">;</span> <span class="c1">// - compilation fails</span>
    <span class="kt">bool</span> <span class="n">status</span> <span class="o">=</span> <span class="n">foo_ptr</span><span class="p">;</span> <span class="c1">// - compilation fails</span>
<span class="p">}</span> <span class="c1">// foo_ptr —É–Ω–∏—á—Ç–æ–∂–µ–Ω. –û–ø–µ—Ä–∞—Ç–æ—Ä delete –≤—ã–∑–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.</span>
</code></pre></div></div>

<h2 id="–∑–∞–¥–∞—á–∞-2-shared_ptrt">–ó–∞–¥–∞—á–∞ 2. <code class="language-plaintext highlighter-rouge">shared_ptr&lt;T&gt;</code></h2>

<p>–≠—Ç–æ –±–æ–ª–µ–µ —É–º–Ω—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ—Ç —Ä–µ—Å—É—Ä—Å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Å—ã–ª–∞—é—â–µ–≥–æ—Å—è —É–º–Ω–æ–≥–æ —É–∫–∞–∑–∞—Ç–µ–ª—è.</p>

<h3 id="—Ñ–∏–Ω–∞–ª—å–Ω—ã–π-—Ç–µ—Å—Ç-shared_ptr">—Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç shared_ptr</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;cassert&gt;
</span>
<span class="k">static</span> <span class="kt">void</span> <span class="nf">test_shared_ptr</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">static_assert</span><span class="p">(</span>
      <span class="o">!</span><span class="n">std</span><span class="o">::</span><span class="n">is_convertible</span><span class="o">&lt;</span><span class="kt">int</span> <span class="o">*</span><span class="p">,</span> <span class="n">shared_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;::</span><span class="n">value</span><span class="p">,</span>
      <span class="s">"shared ptr should not have implicit constructor from pointer!"</span><span class="p">);</span>

  <span class="k">static_assert</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">is_same</span><span class="o">&lt;</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;::</span><span class="n">element_type</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;::</span><span class="n">value</span><span class="p">,</span>
                <span class="s">"shared ptr should contain element_type"</span><span class="p">);</span>

  <span class="k">static_assert</span><span class="p">(</span>
      <span class="n">std</span><span class="o">::</span><span class="n">is_constructible</span><span class="o">&lt;</span><span class="kt">bool</span><span class="p">,</span> <span class="n">shared_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;::</span><span class="n">value</span> <span class="c1">// explicit conversion</span>
          <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">std</span><span class="o">::</span><span class="n">is_convertible</span><span class="o">&lt;</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">,</span>
                                  <span class="kt">bool</span><span class="o">&gt;::</span><span class="n">value</span><span class="p">,</span> <span class="c1">// implicit conversion</span>
      <span class="s">"shared ptr should convertible to the bool, but not implicitly"</span><span class="p">);</span>

  <span class="p">{</span>
    <span class="n">shared_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">empty_ptr</span><span class="p">;</span>

    <span class="n">assert</span><span class="p">(</span><span class="o">!</span><span class="n">empty_ptr</span><span class="p">);</span>
    <span class="n">assert</span><span class="p">(</span><span class="n">empty_ptr</span><span class="p">.</span><span class="n">get</span><span class="p">()</span> <span class="o">==</span> <span class="nb">nullptr</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="p">{</span>
    <span class="k">struct</span> <span class="nc">entity</span> <span class="p">{</span>
      <span class="kt">int</span> <span class="n">f1</span><span class="p">;</span>
      <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">f2</span><span class="p">;</span>
    <span class="p">};</span>

    <span class="k">static_assert</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">is_same</span><span class="o">&lt;</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">entity</span><span class="o">&gt;::</span><span class="n">element_type</span><span class="p">,</span> <span class="n">entity</span><span class="o">&gt;::</span><span class="n">value</span><span class="p">,</span>
                  <span class="s">"shared ptr should contain element_type"</span><span class="p">);</span>

    <span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">entity</span><span class="o">&gt;</span> <span class="k">const</span> <span class="n">ptr</span><span class="p">{</span><span class="k">new</span> <span class="n">entity</span><span class="p">{</span><span class="mi">10</span><span class="p">,</span> <span class="s">"hello"</span><span class="p">}};</span>

    <span class="n">assert</span><span class="p">(</span><span class="n">ptr</span><span class="o">-&gt;</span><span class="n">f1</span> <span class="o">==</span> <span class="mi">10</span><span class="p">);</span>
    <span class="n">assert</span><span class="p">(</span><span class="n">ptr</span><span class="o">-&gt;</span><span class="n">f2</span> <span class="o">==</span> <span class="s">"hello"</span><span class="p">);</span>

    <span class="n">assert</span><span class="p">((</span><span class="o">*</span><span class="n">ptr</span><span class="p">).</span><span class="n">f1</span> <span class="o">==</span> <span class="mi">10</span><span class="p">);</span>
    <span class="n">assert</span><span class="p">((</span><span class="o">*</span><span class="n">ptr</span><span class="p">).</span><span class="n">f2</span> <span class="o">==</span> <span class="s">"hello"</span><span class="p">);</span>

    <span class="n">assert</span><span class="p">(</span><span class="n">ptr</span><span class="p">.</span><span class="n">get</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">f1</span> <span class="o">==</span> <span class="mi">10</span><span class="p">);</span>
    <span class="n">assert</span><span class="p">(</span><span class="n">ptr</span><span class="p">.</span><span class="n">get</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">f2</span> <span class="o">==</span> <span class="s">"hello"</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="p">{</span>
    <span class="n">shared_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">ptr</span><span class="p">{</span><span class="k">new</span> <span class="kt">int</span><span class="p">{</span><span class="mi">10</span><span class="p">}};</span>
    <span class="n">assert</span><span class="p">(</span><span class="o">*</span><span class="n">ptr</span> <span class="o">==</span> <span class="mi">10</span><span class="p">);</span>
    <span class="n">assert</span><span class="p">(</span><span class="n">ptr</span><span class="p">);</span>

    <span class="n">ptr</span><span class="p">.</span><span class="n">reset</span><span class="p">();</span>
    <span class="n">assert</span><span class="p">(</span><span class="n">ptr</span><span class="p">.</span><span class="n">get</span><span class="p">()</span> <span class="o">==</span> <span class="nb">nullptr</span><span class="p">);</span>
    <span class="n">assert</span><span class="p">(</span><span class="o">!</span><span class="n">ptr</span><span class="p">);</span>

    <span class="n">ptr</span><span class="p">.</span><span class="n">reset</span><span class="p">(</span><span class="k">new</span> <span class="kt">int</span><span class="p">{</span><span class="mi">20</span><span class="p">});</span>
    <span class="n">assert</span><span class="p">(</span><span class="o">*</span><span class="n">ptr</span> <span class="o">==</span> <span class="mi">20</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="p">{</span>
    <span class="n">shared_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">ptr</span><span class="p">{</span><span class="k">new</span> <span class="kt">int</span><span class="p">{</span><span class="mi">10</span><span class="p">}};</span>

    <span class="n">ptr</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="k">const</span> <span class="o">&amp;&gt;</span><span class="p">(</span><span class="n">ptr</span><span class="p">);</span>

    <span class="p">{</span>
      <span class="n">shared_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">other</span><span class="p">{</span><span class="n">ptr</span><span class="p">};</span>

      <span class="n">assert</span><span class="p">(</span><span class="n">other</span><span class="p">.</span><span class="n">get</span><span class="p">()</span> <span class="o">==</span> <span class="n">ptr</span><span class="p">.</span><span class="n">get</span><span class="p">());</span>
      <span class="n">assert</span><span class="p">(</span><span class="o">&amp;</span><span class="p">(</span><span class="o">*</span><span class="n">other</span><span class="p">)</span> <span class="o">==</span> <span class="o">&amp;</span><span class="p">(</span><span class="o">*</span><span class="n">ptr</span><span class="p">));</span>
    <span class="p">}</span>

    <span class="p">{</span>
      <span class="n">shared_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">other</span><span class="p">;</span>

      <span class="n">other</span> <span class="o">=</span> <span class="n">ptr</span><span class="p">;</span>

      <span class="n">assert</span><span class="p">(</span><span class="n">other</span><span class="p">.</span><span class="n">get</span><span class="p">()</span> <span class="o">==</span> <span class="n">ptr</span><span class="p">.</span><span class="n">get</span><span class="p">());</span>
      <span class="n">assert</span><span class="p">(</span><span class="o">&amp;</span><span class="p">(</span><span class="o">*</span><span class="n">other</span><span class="p">)</span> <span class="o">==</span> <span class="o">&amp;</span><span class="p">(</span><span class="o">*</span><span class="n">ptr</span><span class="p">));</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="p">{</span>
    <span class="n">shared_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">first</span><span class="p">{</span><span class="k">new</span> <span class="kt">int</span><span class="p">{</span><span class="mi">10</span><span class="p">}};</span>
    <span class="n">shared_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">second</span><span class="p">{</span><span class="n">first</span><span class="p">};</span>

    <span class="n">first</span><span class="p">.</span><span class="n">reset</span><span class="p">();</span>
    <span class="n">assert</span><span class="p">(</span><span class="n">first</span><span class="p">.</span><span class="n">get</span><span class="p">()</span> <span class="o">!=</span> <span class="n">second</span><span class="p">.</span><span class="n">get</span><span class="p">());</span>

    <span class="n">first</span> <span class="o">=</span> <span class="n">second</span><span class="p">;</span>
    <span class="n">assert</span><span class="p">(</span><span class="n">first</span><span class="p">.</span><span class="n">get</span><span class="p">()</span> <span class="o">==</span> <span class="n">second</span><span class="p">.</span><span class="n">get</span><span class="p">());</span>

    <span class="n">second</span><span class="p">.</span><span class="n">reset</span><span class="p">(</span><span class="k">new</span> <span class="kt">int</span><span class="p">{</span><span class="mi">20</span><span class="p">});</span>
    <span class="n">assert</span><span class="p">(</span><span class="n">first</span><span class="p">.</span><span class="n">get</span><span class="p">()</span> <span class="o">!=</span> <span class="n">second</span><span class="p">.</span><span class="n">get</span><span class="p">());</span>

    <span class="n">second</span> <span class="o">=</span> <span class="n">first</span><span class="p">;</span>
    <span class="n">assert</span><span class="p">(</span><span class="n">first</span><span class="p">.</span><span class="n">get</span><span class="p">()</span> <span class="o">==</span> <span class="n">second</span><span class="p">.</span><span class="n">get</span><span class="p">());</span>
  <span class="p">}</span>
  <span class="p">{</span>
    <span class="kt">int</span> <span class="n">trigger</span> <span class="o">=</span> <span class="mi">42</span><span class="p">;</span>
    <span class="k">struct</span> <span class="nc">A</span> <span class="p">{</span>
      <span class="kt">int</span> <span class="o">*</span><span class="n">a_</span><span class="p">;</span>
      <span class="k">explicit</span> <span class="n">A</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">)</span> <span class="o">:</span> <span class="n">a_</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="p">{}</span>
      <span class="o">~</span><span class="n">A</span><span class="p">()</span> <span class="p">{</span> <span class="o">*</span><span class="n">a_</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">};</span>

    <span class="p">{</span>
      <span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">A</span><span class="o">&gt;</span> <span class="n">first</span><span class="p">{</span><span class="k">new</span> <span class="n">A</span><span class="p">{</span><span class="o">&amp;</span><span class="n">trigger</span><span class="p">}};</span>
      <span class="k">auto</span> <span class="n">second</span> <span class="o">=</span> <span class="n">first</span><span class="p">;</span>
      <span class="k">auto</span> <span class="n">third</span> <span class="o">=</span> <span class="n">second</span><span class="p">;</span>
      <span class="k">auto</span> <span class="n">fourth</span> <span class="o">=</span> <span class="n">third</span><span class="p">;</span>
      <span class="k">auto</span> <span class="n">fifth</span> <span class="o">=</span> <span class="n">second</span><span class="p">;</span>

      <span class="n">assert</span><span class="p">(</span><span class="n">first</span><span class="p">.</span><span class="n">get</span><span class="p">()</span> <span class="o">==</span> <span class="n">first</span><span class="p">.</span><span class="n">get</span><span class="p">());</span>
      <span class="n">assert</span><span class="p">(</span><span class="o">*</span><span class="n">first</span><span class="o">-&gt;</span><span class="n">a_</span> <span class="o">==</span> <span class="mi">42</span><span class="p">);</span>
      <span class="n">assert</span><span class="p">(</span><span class="o">*</span><span class="n">fifth</span><span class="o">-&gt;</span><span class="n">a_</span> <span class="o">==</span> <span class="mi">42</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">assert</span><span class="p">(</span><span class="n">trigger</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å-shared_ptr">–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å shared_ptr</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="nc">T</span><span class="p">&gt;</span> 
<span class="k">class</span> <span class="nc">shared_ptr</span> <span class="p">{</span>
  <span class="c1">// —Å–∞–º —Å—ã—Ä–æ–π —É–∫–∞–∑–∞—Ç–µ–ª—å</span>
  <span class="c1">// —Å—á–µ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ int :)</span>
<span class="nl">public:</span>
  <span class="c1">// —è–≤–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –æ–±–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è —É–∫–∞–∑–∞—Ç–µ–ª—è</span>

  <span class="c1">// –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫  –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å</span>

  <span class="c1">// –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ—Å—Ç–∞–≤—å—Ç–µ —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é</span>

  <span class="c1">// –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä (—É–º–µ–Ω—å—à–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫. </span>
  <span class="c1">//   –ï—Å–ª–∏ –≤–∏–¥–∏—Ç, —á—Ç–æ —Å—á–µ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫ == 0, —Ç–æ —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ —Å–∞–º–æ–º—É —É–∫–∞–∑–∞—Ç–µ–ª—é.</span>

  <span class="c1">// –º–µ—Ç–æ–¥ get —á—Ç–æ–±—ã –≤–∑—è—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—å</span>
  <span class="n">T</span><span class="o">*</span> <span class="n">get</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
  
  <span class="c1">// –æ–ø–µ—Ä–∞—Ç–æ—Ä -&gt; —á—Ç–æ–±—ã –≤–∑—è—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—å. </span>

  <span class="c1">// –æ–ø–µ—Ä–∞—Ç–æ—Ä * —Ä–∞–∑—ã–º–µ–Ω–æ–≤–∞–Ω–∏—è —É–∫–∞–∑–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä–µ–∫—Ç T</span>

  <span class="c1">// –∑–∞–º–µ–Ω—è–µ—Ç —Ö—Ä–∞–Ω–∏–º—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –¥—Ä—É–≥–æ–π</span>
  <span class="kt">void</span> <span class="n">reset</span><span class="p">(</span><span class="n">T</span><span class="o">*</span> <span class="n">other</span> <span class="o">=</span> <span class="nb">nullptr</span><span class="p">);</span>

  <span class="c1">// –º–µ—Ç–æ–¥–∞ release –Ω–µ—Ç, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –≤ –∂–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞</span>

  <span class="c1">// —ç—Ç–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–∏—Å–∞—Ç—å if (sptr) { ... }.</span>
  <span class="k">explicit</span> <span class="k">operator</span> <span class="kt">bool</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<h3 id="–ø—Ä–∏–º–µ—Ä-–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è-shared_ptr">–ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è shared_ptr</h3>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">foo</span><span class="o">&gt;</span> <span class="n">foo_shptr</span><span class="p">(</span><span class="k">new</span> <span class="n">foo</span> <span class="p">{</span><span class="mi">888</span><span class="p">,</span> <span class="mi">999</span><span class="p">});</span>
<span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">foo</span><span class="o">&gt;</span> <span class="n">foo_shptr2</span> <span class="o">=</span> <span class="n">foo_shptr</span><span class="p">;</span>
<span class="n">assert</span><span class="p">(</span><span class="n">foo_shptr</span><span class="p">.</span><span class="n">get</span><span class="p">()</span> <span class="o">==</span> <span class="n">foo_shptr2</span><span class="p">.</span><span class="n">get</span><span class="p">());</span>
<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">foo_shptr</span><span class="o">-&gt;</span><span class="n">field1</span>
    <span class="o">&lt;&lt;</span> <span class="s">" "</span>
    <span class="o">&lt;&lt;</span> <span class="n">foo_shptr2</span><span class="o">-&gt;</span><span class="n">field1</span>
    <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>

<span class="c1">// –ø–ª–æ—Ö–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ</span>
<span class="c1">// –ø—Ä–∏–≤–æ–¥–∏ –∫ –¥–≤–æ–π–Ω–æ–º—É —É–¥–∞–ª–µ–Ω–∏—é, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –¥–≤–∞ —É–º–Ω—ã—Ö —É–∫–∞–∑–∞—Ç–µ–ª—è </span>
<span class="c1">// "–≤–ª–∞–¥–µ—é—Ç" –æ–¥–Ω–∏–º –æ–±—Ö–µ–∫—Ç–æ–º, –Ω–µ –∑–Ω–∞—è –¥—Ä—É–≥ –æ –¥—Ä—É–≥–µ</span>
<span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">foo</span><span class="o">&gt;</span> <span class="n">foo_shptr3</span><span class="p">(</span><span class="n">foo_shptr2</span><span class="p">.</span><span class="n">get</span><span class="p">());</span>
<span class="o">/**</span>
<span class="err">–¢—É—Ç</span> <span class="err">–≤—ã–ø–∞–¥–µ—Ç</span> <span class="n">segfault</span><span class="o">:</span>
  
<span class="n">smart_pointer_2</span><span class="p">(</span><span class="mi">2642</span><span class="p">,</span><span class="mh">0x1180fddc0</span><span class="p">)</span> <span class="n">malloc</span><span class="o">:</span> <span class="o">***</span> <span class="n">error</span> <span class="k">for</span> <span class="n">object</span> <span class="mh">0x7fe322504080</span><span class="o">:</span> <span class="n">pointer</span> <span class="n">being</span> <span class="n">freed</span> <span class="n">was</span> <span class="n">not</span> <span class="n">allocated</span>
<span class="n">smart_pointer_2</span><span class="p">(</span><span class="mi">2642</span><span class="p">,</span><span class="mh">0x1180fddc0</span><span class="p">)</span> <span class="n">malloc</span><span class="o">:</span> <span class="o">***</span> <span class="n">set</span> <span class="n">a</span> <span class="n">breakpoint</span> <span class="n">in</span> <span class="n">malloc_error_break</span> <span class="n">to</span> <span class="n">debug</span>
<span class="o">/**</span>
</code></pre></div></div>

<h2 id="–∑–∞–¥–∞—á–∞-3-weak_ptrt">–ó–∞–¥–∞—á–∞ 3. <code class="language-plaintext highlighter-rouge">weak_ptr&lt;T&gt;</code></h2>

<p>TODO: —Ç—É—Ç –±—É–¥–µ—Ç –æ—á–µ–Ω—å –≥–æ—Ä—è—á–æ‚Ä¶.</p>

<p>@Ilya Siganov —Å–¥–µ–ª–∞–π –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏!!!</p>

<p>TODO: —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –Ω–∞–¥–æ –ª–∏ —Ö—Ä–∞–Ω–∏—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å—Ç–∞—Ä—ã–π shared_ptr –≤ –ø–æ–ª–µ weak_ptr</p>

<h2 id="—Ä–∞–¥–∏-—á–µ–≥–æ-–≤—Å—ë-—ç—Ç–æ-–±—ã–ª–æ">–†–∞–¥–∏ —á–µ–≥–æ –≤—Å—ë —ç—Ç–æ –±—ã–ª–æ?</h2>

<blockquote>
  <p>–ù–∏ –≤ –∫–æ–µ–º —Å–ª—É—á–∞–µ –Ω–µ –ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ —É–º–Ω—ã–µ —É–∫–∞–∑–∞—Ç–µ–ª–∏. –í —Å—Ç–∞–Ω–¥–∞—Ä—Ç–µ —Å++11 –æ–Ω–∏ —É–∂–µ –µ—Å—Ç—å –≤ STL, –∞ –¥–ª—è –¥—Ä–µ–≤–Ω–∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –µ—Å—Ç—å –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ boost. –ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–º–Ω—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å –æ—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ! –í –∑–∞–¥–∞–Ω–∏—è—Ö –±—ã–ª–æ –º–Ω–æ–≥–æ —É–ø—Ä–æ—â–µ–Ω–∏–π.</p>
</blockquote>

<p>–ü–æ—á–µ–º—É –º—ã –ª—é–±–∏–º java, go, python, ruby, js, c#? –ü–æ—Ç–æ–º—É —á—Ç–æ —Ç–∞–º –Ω–µ –Ω–∞–¥–æ –¥—É–º–∞—Ç—å –ø—Ä–æ –ø–∞–º—è—Ç—å –∏  —É–∫–∞–∑–∞—Ç–µ–ª–∏. –î—É–º–∞—é—Ç –æ–± —ç—Ç–æ–º —Ä–µ–¥–∫–æ –∏ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø—Ä–∏–ø–µ–∫–ª–æ. –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã —Å–∞–º–∏ –∫–∞–∫-—Ç–æ —Å–ª–µ–¥—è—Ç –∑–∞ –ø–∞–º—è—Ç—å—é –∏ –¥–µ–ª–∞—é—Ç –≤—Å–µ –±–æ–ª–µ–µ –º–µ–Ω–µ–µ —Ö–æ—Ä–æ—à–æ.</p>

<p>–í —Å/—Å++ –¥—É–º–∞—é—Ç –æ –ø–∞–º—è—Ç–∏ –≤—Å–µ–≥–¥–∞. –ü–æ—Å—Ç–æ—è–Ω–Ω–æ. –ò —ç—Ç–æ –æ–±—ã—á–Ω–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —Ç–æ–º—É, —á—Ç–æ —Å–ª–æ–∂–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å++ –ø–∏—à—É—Ç —Ç–æ–ª—å–∫–æ —Ö–∞—Ä–¥–∫–æ—Ä–Ω—ã–µ –±–æ—Ä–æ–¥–∞—á–∏ (—ç—Ç–æ –Ω–µ —Å–µ–∫—Å–∏–∑–º).</p>

<p>–ù–æ —Ç–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ! –í —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å++ (—Å–∫–∞–∂–µ–º, –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ —Å++17) –º–æ–∂–Ω–æ –∏ –ù–£–ñ–ù–û –ø–∏—Å–∞—Ç—å –∫–æ–¥ –∏—Å–ø–æ–ª—å–∑—É—è –¢–æ–ª—å–∫–æ —É–º–Ω—ã–µ —É–∫–∞–∑–∞—Ç–µ–ª–∏. –ê —É–º–Ω—ã–µ —É–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—Å—Ç—å –∏ —Å—á–∞—Å—Ç–ª–∏–≤—É—é –∂–∏–∑–Ω—å.</p>

<p>–í —Å++17 –∏ –¥–∞–ª–µ–µ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ —Ç–æ, —á—Ç–æ–±—ã malloc, –Ω–æ –¥–∞–∂–µ new! –ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–ª–∞–¥–µ—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—ã—Ä—ã–µ —É–∫–∞–∑–∞—Ç–µ–ª—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç —á–∏—Å—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é.</p>

<p>–ö—Å—Ç–∞—Ç–∏, –¥–ª—è –∑–∞–Ω—É–¥. –ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ –≤ —Ç–æ–º, —á—Ç–æ –ª—é–¥–∏ –∑–∞–±—ã–≤–∞—é—Ç –æ—á–∏—â–∞—Ç—å –ø–∞–º—è—Ç—å. –ü—Ä–æ–±–ª–µ–º–∞ —Å–∫–æ—Ä–µ–µ –≤ —Ç–æ–º, —á—Ç–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ –∫—Ç–æ –í–õ–ê–î–ï–ï–¢ –¥–∞–Ω–Ω—ã–º —É–∫–∞–∑–∞—Ç–µ–ª–µ–º. –¢–û –µ—Å—Ç—å –∫–∞–∫–∞—è —Å—É—â–Ω–æ—Å—Ç—å –≤ –∫–æ–¥–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞. –£–º–Ω—ã–µ —É–∫–∞–∑–∞—Ç–µ–ª–∏ —Ä–µ—à–∞—é—Ç —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É.</p>

<p>–ö–∞–∫–∏–µ –±—ã–≤–∞—é—Ç —É–º–Ω—ã–µ —É–∫–∞–∑–∞—Ç–µ–ª–∏ (–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –≤ —Ö–µ–¥–µ—Ä–µ <code class="language-plaintext highlighter-rouge">&lt;memory&gt;</code>)</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">std::unique_ptr</code> - —É–Ω–∏–∫–∞–ª—å–Ω–æ –≤–ª–∞–¥–µ–µ—Ç –æ–±—ä–µ–∫—Ç–æ–º. –ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω. –£–Ω–∏—á—Ç–æ–∂–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å—Ä–∞–∑—É, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —É–Ω–∏—á—Ç–æ–∂–µ–Ω —Å–∞–º. –í–Ω–∏–º–∞–Ω–∏–µ. 90% –≤—Å–µ—Ö —Å–ª—É—á–∞–µ–≤ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç –≤–∏–¥ —É–∫–∞–∑–∞—Ç–µ–ª—è. –ü—Ä–æ—Å—Ç–æ –í–°–ï–ì–î–ê –Ω–∞—á–∏–Ω–∞–π—Ç–µ —Å –Ω–µ–≥–æ.</li>
  <li><code class="language-plaintext highlighter-rouge">std::shared_ptr</code> - –≤ –æ—Ç–ª–∏—á–∏–µ –æ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ, —ç—Ç–æ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å –†–ê–ó–î–ï–õ–Ø–ï–¢ –í–õ–ê–î–ï–ù–ò–ï –º–µ–∂–¥—É –¥—Ä—É–≥–∏–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏. –ù—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å –¥–≤–∞ –æ–±—ä–µ–∫—Ç–∞ A –∏ B. –û–±–∞ –≤–ª–∞–¥–µ—é—Ç —É–∫–∞–∑–∞—Ç–µ–ª–µ–º –Ω–∞ PTR. –£–Ω–∏—á—Ç–æ–∂–µ–Ω PTR –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ A –∏ B –æ–±–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã. –í –∫–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ A –∏ B —É–Ω–∏—á—Ç–æ–∂–∞—é—Ç—Å—è - –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ.</li>
  <li><code class="language-plaintext highlighter-rouge">std::weak_ptr</code> - —Å–ª–∞–±—ã–π ‚Äú–Ω–µ–≤–ª–∞–¥–µ—é—â–∏–π‚Äù —É–∫–∞–∑–∞—Ç–µ–ª—å. –Ω—É–∂–µ–Ω –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.</li>
</ol>

<p>TODO: –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç –Ω–∞ reset</p>

<p>TODO: –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç –Ω–∞ move —Å–µ–º–∞–Ω—Ç–∏–∫—É</p>

<p>TODO: –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç –Ω–∞ weak_ptr</p>
:ET